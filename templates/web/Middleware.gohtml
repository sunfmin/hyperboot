@{
    var data WebData
}
package web

import (
	"@data.TemplatePkg"
	"fmt"
	"log"
	"net/http"
	"os"
	"runtime"
)

// Recovery is a Negroni middleware that recovers from any panics and writes a 500 if there was one.
type ProductionRecovery struct {
	Logger     *log.Logger
	PrintStack bool
	StackAll   bool
	StackSize  int
}

// NewRecovery returns a new instance of Recovery
func NewProductionRecovery() *ProductionRecovery {
	return &ProductionRecovery{
		Logger:     log.New(os.Stdout, "[web] ", 0),
		PrintStack: true,
		StackAll:   false,
		StackSize:  1024 * 8,
	}
}

func (rec *ProductionRecovery) ServeHTTP(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	defer func() {
		if err := recover(); err != nil {
			rw.WriteHeader(http.StatusInternalServerError)
			stack := make([]byte, rec.StackSize)
			stack = stack[:runtime.Stack(stack, rec.StackAll)]

			f := "PANIC: %s\n%s\n%s\n%+v\n"
			errdesc := fmt.Sprintf(f, err, stack, r.URL.RawQuery, r.Header)
			rec.Logger.Println(errdesc)

			fmt.Fprint(rw, templates.P500(errdesc))

		}
	}()

	next(rw, r)
}
